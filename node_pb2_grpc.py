# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import node_pb2 as node__pb2


class NodeStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Handshake = channel.unary_unary(
                '/iohk.chain.node.Node/Handshake',
                request_serializer=node__pb2.HandshakeRequest.SerializeToString,
                response_deserializer=node__pb2.HandshakeResponse.FromString,
                )
        self.Tip = channel.unary_unary(
                '/iohk.chain.node.Node/Tip',
                request_serializer=node__pb2.TipRequest.SerializeToString,
                response_deserializer=node__pb2.TipResponse.FromString,
                )
        self.Peers = channel.unary_unary(
                '/iohk.chain.node.Node/Peers',
                request_serializer=node__pb2.PeersRequest.SerializeToString,
                response_deserializer=node__pb2.PeersResponse.FromString,
                )
        self.GetBlocks = channel.unary_stream(
                '/iohk.chain.node.Node/GetBlocks',
                request_serializer=node__pb2.BlockIds.SerializeToString,
                response_deserializer=node__pb2.Block.FromString,
                )
        self.GetHeaders = channel.unary_stream(
                '/iohk.chain.node.Node/GetHeaders',
                request_serializer=node__pb2.BlockIds.SerializeToString,
                response_deserializer=node__pb2.Header.FromString,
                )
        self.GetFragments = channel.unary_stream(
                '/iohk.chain.node.Node/GetFragments',
                request_serializer=node__pb2.FragmentIds.SerializeToString,
                response_deserializer=node__pb2.Fragment.FromString,
                )
        self.PullHeaders = channel.unary_stream(
                '/iohk.chain.node.Node/PullHeaders',
                request_serializer=node__pb2.PullHeadersRequest.SerializeToString,
                response_deserializer=node__pb2.Header.FromString,
                )
        self.PullBlocksToTip = channel.unary_stream(
                '/iohk.chain.node.Node/PullBlocksToTip',
                request_serializer=node__pb2.PullBlocksToTipRequest.SerializeToString,
                response_deserializer=node__pb2.Block.FromString,
                )
        self.PushHeaders = channel.stream_unary(
                '/iohk.chain.node.Node/PushHeaders',
                request_serializer=node__pb2.Header.SerializeToString,
                response_deserializer=node__pb2.PushHeadersResponse.FromString,
                )
        self.UploadBlocks = channel.stream_unary(
                '/iohk.chain.node.Node/UploadBlocks',
                request_serializer=node__pb2.Block.SerializeToString,
                response_deserializer=node__pb2.UploadBlocksResponse.FromString,
                )
        self.BlockSubscription = channel.stream_stream(
                '/iohk.chain.node.Node/BlockSubscription',
                request_serializer=node__pb2.Header.SerializeToString,
                response_deserializer=node__pb2.BlockEvent.FromString,
                )
        self.FragmentSubscription = channel.stream_stream(
                '/iohk.chain.node.Node/FragmentSubscription',
                request_serializer=node__pb2.Fragment.SerializeToString,
                response_deserializer=node__pb2.Fragment.FromString,
                )
        self.GossipSubscription = channel.stream_stream(
                '/iohk.chain.node.Node/GossipSubscription',
                request_serializer=node__pb2.Gossip.SerializeToString,
                response_deserializer=node__pb2.Gossip.FromString,
                )


class NodeServicer(object):
    """Missing associated documentation comment in .proto file"""

    def Handshake(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Tip(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Peers(self, request, context):
        """Requests for some peers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlocks(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHeaders(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFragments(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PullHeaders(self, request, context):
        """Requests headers of blocks in the chain in the chronological order,
        given a selection of possible starting blocks known by the requester,
        and the identifier of the end block to be included in the returned
        sequence.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PullBlocksToTip(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushHeaders(self, request_iterator, context):
        """Sends headers of blocks to the service in response to a `missing`
        item received from the BlockSubscription response stream.
        The headers are streamed the in chronological order of the chain.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadBlocks(self, request_iterator, context):
        """Uploads blocks to the service in response to a `solicit` item
        received from the BlockSubscription response stream.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BlockSubscription(self, request_iterator, context):
        """Establishes a bidirectional stream to exchange information on new
        blocks created or accepted by the peers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FragmentSubscription(self, request_iterator, context):
        """Establishes a bidirectional stream to exchange information on new
        block fragments created or accepted by the peers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GossipSubscription(self, request_iterator, context):
        """Establishes a bidirectional stream to exchange information on new
        network peers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Handshake': grpc.unary_unary_rpc_method_handler(
                    servicer.Handshake,
                    request_deserializer=node__pb2.HandshakeRequest.FromString,
                    response_serializer=node__pb2.HandshakeResponse.SerializeToString,
            ),
            'Tip': grpc.unary_unary_rpc_method_handler(
                    servicer.Tip,
                    request_deserializer=node__pb2.TipRequest.FromString,
                    response_serializer=node__pb2.TipResponse.SerializeToString,
            ),
            'Peers': grpc.unary_unary_rpc_method_handler(
                    servicer.Peers,
                    request_deserializer=node__pb2.PeersRequest.FromString,
                    response_serializer=node__pb2.PeersResponse.SerializeToString,
            ),
            'GetBlocks': grpc.unary_stream_rpc_method_handler(
                    servicer.GetBlocks,
                    request_deserializer=node__pb2.BlockIds.FromString,
                    response_serializer=node__pb2.Block.SerializeToString,
            ),
            'GetHeaders': grpc.unary_stream_rpc_method_handler(
                    servicer.GetHeaders,
                    request_deserializer=node__pb2.BlockIds.FromString,
                    response_serializer=node__pb2.Header.SerializeToString,
            ),
            'GetFragments': grpc.unary_stream_rpc_method_handler(
                    servicer.GetFragments,
                    request_deserializer=node__pb2.FragmentIds.FromString,
                    response_serializer=node__pb2.Fragment.SerializeToString,
            ),
            'PullHeaders': grpc.unary_stream_rpc_method_handler(
                    servicer.PullHeaders,
                    request_deserializer=node__pb2.PullHeadersRequest.FromString,
                    response_serializer=node__pb2.Header.SerializeToString,
            ),
            'PullBlocksToTip': grpc.unary_stream_rpc_method_handler(
                    servicer.PullBlocksToTip,
                    request_deserializer=node__pb2.PullBlocksToTipRequest.FromString,
                    response_serializer=node__pb2.Block.SerializeToString,
            ),
            'PushHeaders': grpc.stream_unary_rpc_method_handler(
                    servicer.PushHeaders,
                    request_deserializer=node__pb2.Header.FromString,
                    response_serializer=node__pb2.PushHeadersResponse.SerializeToString,
            ),
            'UploadBlocks': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadBlocks,
                    request_deserializer=node__pb2.Block.FromString,
                    response_serializer=node__pb2.UploadBlocksResponse.SerializeToString,
            ),
            'BlockSubscription': grpc.stream_stream_rpc_method_handler(
                    servicer.BlockSubscription,
                    request_deserializer=node__pb2.Header.FromString,
                    response_serializer=node__pb2.BlockEvent.SerializeToString,
            ),
            'FragmentSubscription': grpc.stream_stream_rpc_method_handler(
                    servicer.FragmentSubscription,
                    request_deserializer=node__pb2.Fragment.FromString,
                    response_serializer=node__pb2.Fragment.SerializeToString,
            ),
            'GossipSubscription': grpc.stream_stream_rpc_method_handler(
                    servicer.GossipSubscription,
                    request_deserializer=node__pb2.Gossip.FromString,
                    response_serializer=node__pb2.Gossip.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'iohk.chain.node.Node', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Node(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def Handshake(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iohk.chain.node.Node/Handshake',
            node__pb2.HandshakeRequest.SerializeToString,
            node__pb2.HandshakeResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Tip(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iohk.chain.node.Node/Tip',
            node__pb2.TipRequest.SerializeToString,
            node__pb2.TipResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Peers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iohk.chain.node.Node/Peers',
            node__pb2.PeersRequest.SerializeToString,
            node__pb2.PeersResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBlocks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/iohk.chain.node.Node/GetBlocks',
            node__pb2.BlockIds.SerializeToString,
            node__pb2.Block.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHeaders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/iohk.chain.node.Node/GetHeaders',
            node__pb2.BlockIds.SerializeToString,
            node__pb2.Header.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFragments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/iohk.chain.node.Node/GetFragments',
            node__pb2.FragmentIds.SerializeToString,
            node__pb2.Fragment.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PullHeaders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/iohk.chain.node.Node/PullHeaders',
            node__pb2.PullHeadersRequest.SerializeToString,
            node__pb2.Header.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PullBlocksToTip(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/iohk.chain.node.Node/PullBlocksToTip',
            node__pb2.PullBlocksToTipRequest.SerializeToString,
            node__pb2.Block.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PushHeaders(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/iohk.chain.node.Node/PushHeaders',
            node__pb2.Header.SerializeToString,
            node__pb2.PushHeadersResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadBlocks(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/iohk.chain.node.Node/UploadBlocks',
            node__pb2.Block.SerializeToString,
            node__pb2.UploadBlocksResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BlockSubscription(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/iohk.chain.node.Node/BlockSubscription',
            node__pb2.Header.SerializeToString,
            node__pb2.BlockEvent.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FragmentSubscription(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/iohk.chain.node.Node/FragmentSubscription',
            node__pb2.Fragment.SerializeToString,
            node__pb2.Fragment.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GossipSubscription(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/iohk.chain.node.Node/GossipSubscription',
            node__pb2.Gossip.SerializeToString,
            node__pb2.Gossip.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
